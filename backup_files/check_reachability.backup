/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   check_reachability.c                               :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pauldos- <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/07/31 10:44:13 by pauldos-          #+#    #+#             */
/*   Updated: 2024/07/31 11:29:46 by pauldos-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../include/so_long.h"

void	flood_fill(char **map, int x, int y, int rows, int cols, int **visited)
{
	if (x < 0 || y < 0 || x >= cols || y >= rows || map[y][x] == '1' || visited[y][x])
		return;
	visited[y][x] = 1;
	flood_fill(map, x + 1, y, rows, cols, visited);
	flood_fill(map, x - 1, y, rows, cols, visited);
	flood_fill(map, x, y + 1, rows, cols, visited);
	flood_fill(map, x, y - 1, rows, cols, visited);
}

void	validate_reachability(t_game *game)
{
	int	rows;
	int	cols;
	int	**visited;
	int	i;
	int	j;

	i = 0;
	rows = game->line_count;
	cols = game->max_line_length;
	//allocate memory and set visited values to 0;
	visited = malloc(rows * sizeof(int *));
	while (i < rows)
	{
		visited[i] = malloc(cols * sizeof(int));
		j = 0;
		while (j < cols)
		{
			visited[i][j] = 0;
			j++;
		}
		i++;
	}
	//Check player position
	i = 0;
	while (i < rows)
	{
		j = 0;
		while (j < cols)
		{
			if (game->map[i][j] == 'P')
			{
				game->player_x = j;
				game->player_y = i;
			}
			j++;

		}
		i++;
	}

	flood_fill(game->map, game->player_x, game->player_y, rows, cols, visited);
	i = 0;
	//check if items and exit is reachable
	while (i < rows)
	{
		j = 0;
		while (j < cols)
		{
			if ((game->map[i][j] == 'C' || game->map[i][j] == 'E') && (!visited[i][j]))
			{
				ft_printf("Map is invalid, %c at the position ", game->map[i][j]);
				ft_printf("x: %d and ", i);
				ft_printf("y: %d is not reachable\n", j);
				i = 0;
				while (i < rows)
				{
					ft_printf("Freeing ...visited[%d]\n", i);
					free(visited[i]);
					i++;
				}
				free(visited);
				i = 0;
				while (i < rows)
				{
					ft_printf("Freeing ...game->map[%d]\n", i);
					free(game->map[i]);
					i++;
				}
				free(game->map);
				exit(1);
			}
			j++;
		}
		i++;
	}
	i = 0;
	while (i < rows)
	{
		free(visited[i]);
		i++;
	}
	free(visited);
}
