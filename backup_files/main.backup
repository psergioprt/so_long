#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "../util_funcs/Libft/libft.h"
//#include "../util_funcs/ft_printf/ft_printf.h"
#include <stdarg.h>
#include <unistd.h>

/*void ft_putnbr_new(int n)
{
    if (n < 0)
    {
        write(1, "-", 1);
        n = -n;
    }
    if (n >= 10)
        ft_putnbr_new(n / 10);
    char c = (n % 10) + '0';
    write(1, &c, 1);
}*/

static void	ft_putchar_new_fd(char c, int fd)
{
	write (fd, &c, 1);
}

static void	ft_putstr_new_fd(char *s, int fd)
{
	int	i;

	if (!s || fd == -1)
		return ;
	i = 0;
	while (s[i])
	{
		write(fd, &s[i], 1);
		i++;
	}
}

static void	ft_putnbr_new_fd(int n, int fd)
{
	if (fd == -1)
		return ;
	if (n == -2147483648)
	{
		ft_putstr_new_fd("-2147483648", fd);
		return ;
	}
	else if (n < 0)
	{
		ft_putchar_new_fd('-', fd);
		ft_putnbr_new_fd(-n, fd);
	}
	else if (n < 10)
	{
		ft_putchar_new_fd(n + '0', fd);
	}
	else
	{
		ft_putnbr_new_fd(n / 10, fd);
		ft_putnbr_new_fd(n % 10, fd);
	}
}

int	ft_print_int(int n)
{
	int				nb;
	unsigned int	i;

	nb = n;
	i = 1;
	if (n < 0 && n != -2147483648)
	{
		nb = -n;
		i++;
	}
	while (nb > 9)
	{
		nb = nb / 10;
		i++;
	}
	ft_putnbr_new_fd(n, 1);
	if (n == -2147483648)
		return (11);
	return (i);
}


/*int ft_printf(const char *format, ...)
{
    va_list args;
    va_start(args, format);
    const char *ptr = format;
    while (*ptr)
    {
        if (*ptr == '%' && *(ptr + 1) == 'd')
        {
            int num = va_arg(args, int);
	    ft_print_int(num);
//            ft_putnbr_new_fd(num, 1);
            ptr += 2;
        }
        else
        {
            write(1, ptr, 1);
            ptr++;
        }
    }
    va_end(args);
    return 0; // Simplified return
}*/

static int	ft_printf_strchr_new(const char *s, int c)
{
	while (*s)
	{
		if (*s == (char)c)
			return (1);
		s++;
	}
	return (0);
}

#include "ft_printf.h"

static int	ft_printf_format(const char *format, int i, va_list args)
{
	if (format[i + 1] == '%')
		return (ft_printf_putchar(format[i + 1]));
	else if (format[i + 1] == 'c')
		return (ft_printf_putchar(va_arg(args, int)));
	else if (format[i + 1] == 's')
		return (ft_printf_putstr(va_arg(args, char *)));
	else if (format[i + 1] == 'i' || format[i + 1] == 'd')
	{
		int	num = va_arg(args, int);
		return (ft_print_int(num));
	}

		// return (ft_print_int(va_arg(args, int)));
	// Add more specifiers if needed
	return (0);
}

int	ft_printf(const char *format, ...)
{
	int		char_len;
	int		i;
	va_list	args;

	i = 0;
	char_len = 0;
	va_start(args, format);
	while (format[i])
	{
		if (format[i] == '%')
		{
			if (ft_printf_strchr_new("csdi%", format[i + 1])) // Simplified for test
			{
				char_len += ft_printf_format(format, i, args);
				i++;
			}
		
			else
			{
				ft_putchar_new_fd(format[i], 1);
				char_len++;
			}
		}
		else
		{
			ft_putchar_new_fd(format[i], 1);
			char_len++;
		}
		i++;	
	}
	va_end(args);
	return (char_len);
}


int	main(void)
{
	char	*map[] = {
		"1111111111111111111111111",
		"1000100000C000000001000E1",
		"1000100000000010000100001",
		"1000100001111110000000001",
		"1000000000010000000000001",
		"1P000000000100000000000011",
		"1111111111111111111111111",
		NULL
	};
	int	rows = 0;

	int	i = 0;

	while (i < 30)
	{
		printf("printf function: %d\n", i);
		ft_printf("ft_printf function: %d\n", i);
		i++;
	}
	while (map[rows] != NULL)
		rows++;
	ft_printf("The map has %d rows\n", rows);
	int	columns = 0;

	columns = ft_strlen(map[0]);
	ft_printf("The map has %d columns\n", columns);

	rows = 0;
	while (map[rows] != NULL)
	{
		if (ft_strlen(map[rows]) != columns)
		{
			printf("FUNCTION PRINTF: LEN of row[%d] is %d instead of %d\n", rows, ft_strlen(map[rows]), columns);
			ft_printf("FUNCTION FT_PRINTF: LEN of row[%d] is %d instead of %d\n", rows, ft_strlen(map[rows]), columns);
			ft_printf("Map does not have equal columns\n");
			return (1);
		}
		rows++;
	}
	ft_printf("Map has equal columns");
	return (0);	
}
